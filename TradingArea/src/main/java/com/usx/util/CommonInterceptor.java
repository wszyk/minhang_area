package com.usx.util;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;public class CommonInterceptor extends HandlerInterceptorAdapter {	@SuppressWarnings("unchecked")	@Override	public boolean preHandle(HttpServletRequest request,			HttpServletResponse response, Object handler) throws Exception {		String requestUri = request.getRequestURI();		String contextPath = request.getContextPath();		String url = requestUri.substring(contextPath.length());		if ("/sys/user/loginView".equals(url) || "/sys/user/login.do".equals(url) || "/sys/user/loginOut".equals(url) || url.contains("/sys/user/autoLogin")) {			return true;		}		Object loginUser = request.getSession().getAttribute("loginUser");		if (loginUser == null) {			request.getRequestDispatcher("/sys/user/loginView").forward(request, response);			return false;		} else {			Map<String, Object> user = (Map<String, Object>) StringUtil.objectToMap(loginUser);			int role = (Integer) user.get("role");			// 非管理员用户			if (role != 0) {				if (url.indexOf("/sys/") >= 0) {					request.getRequestDispatcher("/app/show").forward(request, response);					return false;				}			}			return true;		}	}	/**	 * 在业务处理器处理请求执行完成后,生成视图之前执行的动作 可在modelAndView中加入数据，比如当前时间	 */	@Override	public void postHandle(HttpServletRequest request,			HttpServletResponse response, Object handler,			ModelAndView modelAndView) throws Exception {			}	/**	 * 在DispatcherServlet完全处理完请求后被调用,可用于清理资源等	 * 	 * 当有拦截器抛出异常时,会从当前拦截器往回执行所有的拦截器的afterCompletion()	 */	@Override	public void afterCompletion(HttpServletRequest request,			HttpServletResponse response, Object handler, Exception ex)			throws Exception {			}}