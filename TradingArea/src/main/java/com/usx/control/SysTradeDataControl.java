package com.usx.control;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.net.URLDecoder;import java.text.ParseException;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.ResourceBundle;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.poi.hssf.usermodel.HSSFCell;import org.apache.poi.hssf.usermodel.HSSFCellStyle;import org.apache.poi.hssf.usermodel.HSSFDataFormat;import org.apache.poi.hssf.usermodel.HSSFRow;import org.apache.poi.hssf.usermodel.HSSFSheet;import org.apache.poi.hssf.usermodel.HSSFWorkbook;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import com.usx.model.Area;import com.usx.model.Trade;import com.usx.model.TradeData;import com.usx.service.SysAreaService;import com.usx.service.SysTradeDataService;import com.usx.service.SysTradeService;import com.usx.util.ReadExcel;import com.usx.util.StringUtil;@Controller@RequestMapping("/sys/tradeData")public class SysTradeDataControl {	@Autowired	private SysTradeDataService sysTradeDataService;	@Autowired	private SysAreaService sysAreaService;	@Autowired	private SysTradeService sysTradeService;	@RequestMapping(value = "/list", method = RequestMethod.GET)	public String list(Model model) {		// 获得区域的数据		List<Area> areaList = sysAreaService.getAllDataList();		model.addAttribute("areaList", areaList);		// 获得所有的商圈		List<Trade> tradeList = sysTradeService.getAllTradesByAreaId(-1);		model.addAttribute("tradeList", tradeList);		// 获得所有的行业		List<String> industryList = sysTradeDataService.getAllIndustry(-1);		model.addAttribute("industryList", industryList);		return "sysTradeData";	}	/**	 * 获得商圈的数据	 * 	 * @param page	 * @param model	 * @return	 */	@RequestMapping(value = "/getList.do", method = RequestMethod.POST)	@ResponseBody	public Map<String, Object> getList(String page, Model model, HttpServletRequest req,			HttpServletResponse rep) {		String areaId = req.getParameter("areaId");		String tradeId = req.getParameter("tradeId");		String industry = req.getParameter("industry");		String dateStart = req.getParameter("dateStart");		String dateEnd = req.getParameter("dateEnd");		Map<String, String> map = new HashMap<String, String>();		map.put("areaId", areaId);		map.put("tradeId", tradeId);		map.put("industry", industry);		map.put("dateStart", dateStart);		map.put("dateEnd", dateEnd);				Map<String, Object> result = new HashMap<String, Object>();		int _page = Integer.parseInt(page);		List<Map<String, Object>> dataList = sysTradeDataService.getDataList(				_page, 10, map);		result.put("data", dataList);		result.put("currentPage", page);		result.put("pages", sysTradeDataService.getDataCount(map));		return result;	}	/**	 * 跳转到添加页面	 * 	 * @param model	 * @return	 */	@RequestMapping(value = "/addView", method = RequestMethod.GET)	public String addView(Model model) {		List<Area> areaList = sysAreaService.getAllDataList();		model.addAttribute("areaList", areaList);		return "sysTradeDataAdd";	}	/**	 * 根据区域获得商圈的数据	 * 	 * @param req	 * @param rep	 * @return	 */	@RequestMapping(value = "/getAllTradesByAreaId.do", method = RequestMethod.GET)	@ResponseBody	public Map<String, Object> getAllTradesByAreaId(HttpServletRequest req,			HttpServletResponse rep) {		Map<String, Object> result = new HashMap<String, Object>();		String areaId = req.getParameter("areaId");		List<Trade> tradeList = sysTradeService.getAllTradesByAreaId(Integer				.parseInt(areaId));		result.put("data", tradeList);		result.put("code", 0);		result.put("msg", "操作成功！");		return result;	}	/**	 * 保存	 * 	 * @return	 * @throws ParseException	 */	@RequestMapping(value = "/addSave.do", method = RequestMethod.POST)	@ResponseBody	public Map<String, Object> addSave(HttpServletRequest req,			HttpServletResponse rep) throws ParseException {		Map<String, Object> result = new HashMap<String, Object>();		String id = req.getParameter("id");		String tradeId = req.getParameter("tradeId");		String areaId = req.getParameter("areaId");		String dateTime = req.getParameter("dateTime");		String industry = req.getParameter("industry");		String sales = req.getParameter("sales");		String salesNums = req.getParameter("salesNums");		String avgPrice = req.getParameter("avgPrice");		String mids = req.getParameter("mids");		String mcc = req.getParameter("mcc");		TradeData tradeData = new TradeData();		tradeData.setAreaId(Integer.parseInt(areaId));		tradeData.setTradeId(Integer.parseInt(tradeId));		Trade trade = sysTradeService.getDataById(Integer.parseInt(tradeId));		if (trade != null) {			tradeData.setTradeCode(trade.getTradeCode());			tradeData.setTradeName(trade.getTradeName());		}		tradeData.setDateTime(StringUtil.parse(dateTime));		if (StringUtil.isEmpty(mcc) == false) {			tradeData.setMcc(mcc);		}		tradeData.setIndustry(industry);		tradeData.setSales(Double.parseDouble(sales));		tradeData.setSalesNums(Integer.parseInt(salesNums));		if (StringUtil.isEmpty(avgPrice) == false) {			tradeData.setAvgPrice(Double.parseDouble(avgPrice));		}		tradeData.setMids(Integer.parseInt(mids));		tradeData.setCreateTime(new Date());		// 保存		if (StringUtil.isEmpty(id)) {			sysTradeDataService.saveData(tradeData);		}		// 编辑		else {			tradeData.setId(Integer.parseInt(id));			sysTradeDataService.editData(tradeData);		}		result.put("code", 0);		result.put("msg", "添加成功！");		return result;	}	/**	 * 编辑页面	 * 	 * @param dataId	 * @param model	 * @return	 */	@RequestMapping(value = "/editView/{dataId}", method = RequestMethod.GET)	public String editView(@PathVariable int dataId, Model model) {		List<Area> areaList = sysAreaService.getAllDataList();		TradeData tradeData = sysTradeDataService.getDataById(dataId);		model.addAttribute("tradeData", tradeData);		model.addAttribute("areaList", areaList);		return "sysTradeDataAdd";	}	/**	 * 删除	 * 	 * @param req	 * @param rep	 * @return	 */	@RequestMapping(value = "/delete.do", method = RequestMethod.POST)	@ResponseBody	public Map<String, Object> delete(HttpServletRequest req,			HttpServletResponse rep) {		Map<String, Object> result = new HashMap<String, Object>();		String id = req.getParameter("id");		if (StringUtil.isEmpty(id) == false) {			// 2、删除			sysTradeDataService.deleteDataById(Integer.parseInt(id));		}		result.put("code", 0);		result.put("msg", "删除成功！");		return result;	}	/**	 * 导出模板	 * 	 * @param req	 * @param rep	 * @return	 * @throws IOException	 */	@RequestMapping(value = "/export")	public void export(HttpServletRequest req, HttpServletResponse rep)			throws IOException {		/**		 * 以下为生成Excel操作		 */		// 1.创建一个workbook，对应一个Excel文件		HSSFWorkbook wb = new HSSFWorkbook();		// 2.在workbook中添加一个sheet，对应Excel中的一个sheet		HSSFSheet sheet = wb.createSheet("模板数据");		sheet.setDefaultColumnWidth(15);		// 3.在sheet中添加表头第0行，老版本poi对excel行数列数有限制short		HSSFRow row = sheet.createRow((int) 0);		// 4.创建单元格，设置值表头，设置表头居中		HSSFCellStyle style = wb.createCellStyle();		// 居中格式		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);		// 设置表头		HSSFCell cell = row.createCell(0);		cell.setCellValue("名称");		cell.setCellStyle(style);		cell = row.createCell(1);		cell.setCellValue("行业");		cell.setCellStyle(style);				cell = row.createCell(2);		cell.setCellValue("月份");		cell.setCellStyle(style);		cell = row.createCell(3);		cell.setCellValue("交易金额（元）");		cell.setCellStyle(style);		cell = row.createCell(4);		cell.setCellValue("交易笔数（笔）");		cell.setCellStyle(style);		cell = row.createCell(5);		cell.setCellValue("商户数（个）");		cell.setCellStyle(style);				String fileName = "模板数据";		ByteArrayOutputStream os = new ByteArrayOutputStream();		wb.write(os);		byte[] content = os.toByteArray();		InputStream is = new ByteArrayInputStream(content);		// 设置response参数，可以打开下载页面		rep.reset();		rep.setContentType("application/vnd.ms-excel;charset=utf-8");		rep.setHeader("Content-Disposition", "attachment;filename="				+ new String((fileName + ".xls").getBytes(), "iso-8859-1"));		ServletOutputStream out = rep.getOutputStream();		BufferedInputStream bis = null;		BufferedOutputStream bos = null;		try {			bis = new BufferedInputStream(is);			bos = new BufferedOutputStream(out);			byte[] buff = new byte[2048];			int bytesRead;			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {				bos.write(buff, 0, bytesRead);			}		} catch (Exception e) {			e.printStackTrace();		} finally {			if (bis != null)				bis.close();			if (bos != null)				bos.close();		}	}		/**	 * 导出搜索数据	 * 	 * @param req	 * @param rep	 * @return	 * @throws IOException	 */	@RequestMapping(value = "/exportData")	public void exportData(HttpServletRequest req, HttpServletResponse rep)			throws IOException {		String areaId = req.getParameter("areaId");		String tradeId = req.getParameter("tradeId");		String industry = req.getParameter("industry");		industry = URLDecoder.decode(industry,"UTF-8");		String dateStart = req.getParameter("dateStart");		String dateEnd = req.getParameter("dateEnd");		System.out.println("areaId:"+areaId+",tradeId:"+tradeId+",industry:"+industry+",dateStart:"+dateStart+",dateEnd:"+dateEnd);		List<Map<String, Object>> datas = sysTradeDataService.getDataByKeys(areaId, tradeId, industry, dateStart, dateEnd);				String[] title = {"区域", "商圈", "行业", "月份", "交易金额（元）", "交易笔数（笔）", "商户数（个）"};				/**		 * 以下为生成Excel操作		 */		// 1.创建一个workbook，对应一个Excel文件		HSSFWorkbook wb = new HSSFWorkbook();		// 2.在workbook中添加一个sheet，对应Excel中的一个sheet		HSSFSheet sheet = wb.createSheet("商圈数据");		sheet.setDefaultColumnWidth(15);		// 3.在sheet中添加表头第0行，老版本poi对excel行数列数有限制short		HSSFRow row = sheet.createRow((int) 0);		// 4.创建单元格，设置值表头，设置表头居中		HSSFCellStyle style = wb.createCellStyle();		HSSFDataFormat format = wb.createDataFormat(); 		//这样才能真正的控制单元格格式，@就是指文本型，具体格式的定义还是参考上面的原文吧 		style.setDataFormat(format.getFormat("@")); 		// 居中格式		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);				// 设置表头		for (int i = 0; i < title.length; i++) {			HSSFCell cell = row.createCell(i);			cell.setCellValue(title[i]);			cell.setCellStyle(style);		}				int cellIndex = 1;		for (Map<String, Object> map : datas) {			row = sheet.createRow(cellIndex);			for (int i = 0; i < title.length; i++) {				HSSFCell cell = row.createCell(i);				if (i == 0) {					cell.setCellValue(map.get("areaName")+"");				}				else if (i == 1) {					cell.setCellValue(map.get("tradeName")+"");				}				else if (i == 2) {					cell.setCellValue(map.get("industry")+"");				}				else if (i == 3) {					cell.setCellValue(map.get("dateTime")+"");				}				else if (i == 4) {					BigDecimal bigDecimal = new BigDecimal((Double)map.get("sales"));					String result = bigDecimal.toString();					cell.setCellValue(result);				}				else if (i == 5) {					cell.setCellValue(" "+map.get("salesNums"));				}				else if (i == 6) {					cell.setCellValue(" "+map.get("mids"));				}				else {					cell.setCellValue("");				}				cell.setCellStyle(style);			}			cellIndex++;		}				String fileName = "商圈数据";		ByteArrayOutputStream os = new ByteArrayOutputStream();		wb.write(os);		byte[] content = os.toByteArray();		InputStream is = new ByteArrayInputStream(content);		// 设置response参数，可以打开下载页面		rep.reset();		rep.setContentType("application/vnd.ms-excel;charset=utf-8");		rep.setHeader("Content-Disposition", "attachment;filename="				+ new String((fileName + ".xls").getBytes(), "iso-8859-1"));		ServletOutputStream out = rep.getOutputStream();		BufferedInputStream bis = null;		BufferedOutputStream bos = null;		try {			bis = new BufferedInputStream(is);			bos = new BufferedOutputStream(out);			byte[] buff = new byte[2048];			int bytesRead;			while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {				bos.write(buff, 0, bytesRead);			}		} catch (Exception e) {			e.printStackTrace();		} finally {			if (bis != null)				bis.close();			if (bos != null)				bos.close();		}	}		/**	 * 导入数据板块	 * 	 * @param model	 * @return	 */	@RequestMapping(value = "/importView", method = RequestMethod.GET)	public String importView(Model model) {		List<Area> areaList = sysAreaService.getAllDataList();		model.addAttribute("areaList", areaList);		return "sysTradeDataImport";	}		/**	 * 导入数据保存	 * @param req	 * @param rep	 * @return	 * @throws ParseException	 * @throws IOException 	 */	@RequestMapping(value = "/importSave.do", method = RequestMethod.POST)	@ResponseBody	public Map<String, Object> importSave(HttpServletRequest req,			HttpServletResponse rep) throws ParseException, IOException {		Map<String, Object> result = new HashMap<String, Object>();				String areaId = req.getParameter("areaId");		String importFile = req.getParameter("importFile");		// 获取临时保存文件的地址		ResourceBundle resource = ResourceBundle.getBundle("application");		String fileName = importFile;		String path = resource.getString("common.file.path") + fileName;				// 1、读取文件内容		List<List<Object>> list = ReadExcel.readExcel(new File(path));		// 2、获得这个区域的所有商圈		List<Trade> tradeList = sysTradeService.getAllTradesByAreaId(Integer.parseInt(areaId));		// 3、存储到数据库中		sysTradeDataService.saveImport(list, areaId, tradeList);				result.put("code", 0);		result.put("msg", "操作成功！");		return result;	}}