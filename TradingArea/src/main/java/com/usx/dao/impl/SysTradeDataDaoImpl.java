package com.usx.dao.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import com.usx.dao.SysTradeDataDao;import com.usx.model.TradeData;import com.usx.util.HibernateUtil;import com.usx.util.StringUtil;@Repositorypublic class SysTradeDataDaoImpl implements SysTradeDataDao {	@Autowired	private HibernateUtil hibernateUtil;	@SuppressWarnings("unchecked")	public List<Map<String, Object>> getDataList(int page, int pageSize, final Map<String, String> _map) {		String _areaId = _map.get("areaId");		String _tradeId = _map.get("tradeId");		String _industry = _map.get("industry");		String _dateStart = _map.get("dateStart");		String _dateEnd = _map.get("dateEnd");		String query = "SELECT td.id, td.areaId, a.areaName, td.tradeId, td.tradeCode, td.tradeName, td.dateTime, "				+ "td.industry, td.sales, td.salesNums, td.mids, td.avgPrice, td.flg, td.createTime, td.mcc  FROM trade_data td, area a WHERE td.areaId = a.id"				+ ("-1".equals(_areaId) ? "" : " and td.areaId = " + _areaId)				+ ("-1".equals(_tradeId) ? "" : " and td.tradeId = " + _tradeId)				+ ("-1".equals(_industry) ? "" : " and td.industry = '" + _industry + "'")				+ ("".equals(_dateStart) ? "" : " and td.dateTime >= '" + _dateStart + "'")				+ ("".equals(_dateEnd) ? "" : " and td.dateTime <= '" + _dateEnd + "'")				+ " ORDER BY td.dateTime DESC limit "				+ (page - 1)				* pageSize				+ ", " + pageSize;		List<Object[]> objects = hibernateUtil.fetchAll(query);		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();		for (Object[] object : objects) {			int id = (Integer) object[0];			int areaId = (Integer) object[1];			String areaName = (String) object[2];			int tradeId = (Integer) object[3];//			String tradeCode = (String) object[4];			String tradeName = (String) object[5];			Date dateTime = (Date) object[6];			String industry = (String) object[7];			double sales = (Double) object[8];			Integer salesNums = (Integer) object[9];			Integer mids = (Integer) object[10];//			double avgPrice = (Double) object[11];			int flg = (Integer) object[12];			Date createTime = (Date) object[13];//			String mcc = (String) object[14];			Map<String, Object> map = new HashMap<String, Object>();			map.put("id", id);			map.put("areaId", areaId);			map.put("areaName", areaName);			map.put("tradeId", tradeId);//			map.put("tradeCode", tradeCode);			map.put("tradeName", tradeName);			map.put("dateTime", StringUtil.format(dateTime, "yyyy/MM"));			map.put("industry", industry);			map.put("sales", sales);			map.put("salesNums", salesNums);			map.put("mids", mids);//			map.put("avgPrice", avgPrice);			map.put("flg", flg);			map.put("createTime", createTime);//			map.put("mcc", mcc);			resultList.add(map);		}		return resultList;	}	@SuppressWarnings("unchecked")	public int getDataCount(final Map<String, String> _map) {		String _areaId = _map.get("areaId");		String _tradeId = _map.get("tradeId");		String _industry = _map.get("industry");		String _dateStart = _map.get("dateStart");		String _dateEnd = _map.get("dateEnd");		String query = "SELECT count(id) from trade_data td WHERE 1=1 "				+ ("-1".equals(_areaId) ? "" : " and td.areaId = " + _areaId)				+ ("-1".equals(_tradeId) ? "" : " and td.tradeId = " + _tradeId)				+ ("-1".equals(_industry) ? "" : " and td.industry = '" + _industry + "'")				+ ("".equals(_dateStart) ? "" : " and td.dateTime >= '" + _dateStart + "'")				+ ("".equals(_dateEnd) ? "" : " and td.dateTime <= '" + _dateEnd + "'");		List<Object> objects = hibernateUtil.fetchAll(query);		Object _count = objects.get(0);		return Integer.parseInt(_count.toString());	}	public void saveData(TradeData tradeData) {		hibernateUtil.create(tradeData);	}	public void editData(TradeData tradeData) {		hibernateUtil.update(tradeData);	}	public TradeData getDataById(final int dataId) {		return hibernateUtil.fetchById(dataId, TradeData.class);	}	public void deleteDataById(final int id) {		hibernateUtil.delete(id, TradeData.class);	}	@SuppressWarnings("unchecked")	public Date getMaxDateByTradeIds(final String tradeIds) {		String query = "select max(dateTime) from trade_data where tradeId in ("				+ tradeIds + ")";		List<Object> objects = hibernateUtil.fetchAll(query);		Object date = objects.get(0);		if (date != null) {			return (Date) date;		}		return new Date();	}	@SuppressWarnings("unchecked")	public List<Map<String, Object>> loadTotalAnalysis(final String formatTime, final String selectContent,			final String tradeIds, final int areaId) {		String query = "SELECT td.industry, sum(td." + selectContent + ") as "				+ selectContent 				+ " FROM trade_data td WHERE td.areaId = " + areaId + " AND td.tradeId in ("				+ tradeIds 				+ ")  GROUP BY td.industry ORDER BY td.sales DESC";		List<Object[]> objects = hibernateUtil.fetchAll(query);		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();		for (Object[] object : objects) {			String name = (String) object[0];			Double value = Double.parseDouble(object[1].toString());			Map<String, Object> map = new HashMap<String, Object>();			map.put("name", name);			map.put("value", value);			resultList.add(map);		}		return resultList;	}	@SuppressWarnings("unchecked")	public List<Map<String, Object>> loadTradeTotalAnalysis(final String formatTime, final String selectContent,			final String tradeIds, final int areaId) {		String _formatTime = "DATE_FORMAT(td.dateTime,'"+formatTime+"') formatTime";		if ("%Y-".equals(formatTime)) {			_formatTime = "CONCAT(DATE_FORMAT(td.dateTime, '%Y-'),FLOOR((date_format(td.dateTime, '%m')+2)/3)) formatTime";		}		String query = "SELECT "+_formatTime+", td.industry, sum(td." + selectContent + ") as "				+ selectContent 				+ " FROM trade_data td WHERE td.areaId = " + areaId + " AND td.tradeId in ("				+ tradeIds				+ ")  GROUP BY formatTime, td.industry ORDER BY formatTime ASC";		List<Object[]> objects = hibernateUtil.fetchAll(query);		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();		for (Object[] object : objects) {			String dateTime = (String) object[0];			String name = (String) object[1];			Double value = Double.parseDouble(object[2].toString());			Map<String, Object> map = new HashMap<String, Object>();			map.put("dateTime", dateTime);			if ("%Y-".equals(formatTime)) {				map.put("dateTime", StringUtil.formatQuarterTime(dateTime));			}			map.put("name", name);			map.put("value", value);			resultList.add(map);		}		return resultList;	}	@SuppressWarnings("unchecked")	public List<Map<String, Object>> loadTrendAnalysis(final String formatTime, final String selectContent,			final String tradeIds, final int areaId) {		String[] selectContentArr = selectContent.split(",");		String _formatTime = "DATE_FORMAT(td.dateTime,'"+formatTime+"') formatTime";		if ("%Y-".equals(formatTime)) {			_formatTime = "CONCAT(DATE_FORMAT(td.dateTime, '%Y-'),FLOOR((date_format(td.dateTime, '%m')+2)/3)) formatTime";		}		String query = "SELECT t.tradeName, "+_formatTime+", sum(td." + selectContentArr[0] + ") as "				+ selectContentArr[0] + " FROM trade_data td, trade t WHERE td.areaId = " + areaId + " AND td.tradeId = t.id AND td.tradeId in ("				+ tradeIds 				+ ") " 				+ (selectContentArr.length == 1 ? "" : " AND td.industry = '"+selectContentArr[1]+"'")				+ "  GROUP BY td.tradeId, formatTime ORDER BY formatTime";		List<Object[]> objects = hibernateUtil.fetchAll(query);		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();		for (Object[] object : objects) {			String name = (String) object[0];			String dateTime = (String) object[1];			Double value = Double.parseDouble(object[2].toString());			Map<String, Object> map = new HashMap<String, Object>();			map.put("name", name);			map.put("dateTime", dateTime);			if ("%Y-".equals(formatTime)) {				map.put("dateTime", StringUtil.formatQuarterTime(dateTime));			}			map.put("value", value);			resultList.add(map);		}		return resultList;	}		@SuppressWarnings("unchecked")	public List<Map<String, Object>> loadCompareAnalysis(final String formatTime, final String selectContent,			final String tradeIds, final int areaId) {		String[] selectTimeArr = formatTime.split(",");		String startTime = selectTimeArr[0] + "-01";		String endTime = selectTimeArr[1] + "-31";		String[] selectContentArr = selectContent.split(",");		int totalNum = 1;		if ("mids".equals(selectContentArr[0])) {			String query0 = "SELECT DATE_FORMAT(td.dateTime, '%Y-%m') as formatTime"					+ " FROM trade_data td, trade t"					+ " WHERE td.areaId = " + areaId + " AND td.tradeId = t.id AND td.tradeId in ("					+ tradeIds 					+ ") " 					+ " AND td.dateTime BETWEEN '"+startTime+"' AND '"+endTime+"'"					+ (selectContentArr.length == 1 ? "" : " AND td.industry = '"+selectContentArr[1]+"'")					+ " GROUP BY formatTime ORDER BY formatTime";				List<Object[]> objects0 = hibernateUtil.fetchAll(query0);				if (objects0.size() > 0) {					totalNum = objects0.size();				}		}		String query = "SELECT t.tradeName, SUM(td."+selectContentArr[0]+")/"+totalNum+" AS "+selectContentArr[0]						+ " FROM trade_data td, trade t"						+ " WHERE td.areaId = " + areaId + " AND td.tradeId = t.id AND td.tradeId in ("						+ tradeIds 						+ ") " 						+ " AND td.dateTime BETWEEN '"+startTime+"' AND '"+endTime+"'"						+ (selectContentArr.length == 1 ? "" : " AND td.industry = '"+selectContentArr[1]+"'")						+ " GROUP BY td.tradeId";		List<Object[]> objects = hibernateUtil.fetchAll(query);		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();		for (Object[] object : objects) {			String name = (String) object[0];			Double value = Double.parseDouble(object[1].toString());			Map<String, Object> map = new HashMap<String, Object>();			map.put("name", name);			map.put("value", value);			resultList.add(map);		}		return resultList;	}		@SuppressWarnings("unchecked")	public List<Map<String, Object>> loadTradeCompareAnalysis(final String formatTime, final String selectContent,			final String tradeIds, final int areaId) {		String[] selectTimeArr = formatTime.split(",");		String startTime = selectTimeArr[0] + "-01";		String endTime = selectTimeArr[1] + "-31";		String[] selectContentArr = selectContent.split(",");		int totalNum = 1;		{			String query0 = "SELECT DATE_FORMAT(td.dateTime, '%Y-%m') as formatTime"				+ " FROM trade_data td, trade t"				+ " WHERE td.areaId = " + areaId + " AND td.tradeId = t.id AND td.tradeId in ("				+ tradeIds 				+ ") " 				+ " AND td.dateTime BETWEEN '"+startTime+"' AND '"+endTime+"'"				+ (selectContentArr.length == 1 ? "" : " AND td.industry = '"+selectContentArr[1]+"'")				+ " GROUP BY formatTime ORDER BY formatTime";			List<Object[]> objects0 = hibernateUtil.fetchAll(query0);			if (objects0.size() > 0) {				totalNum = objects0.size();			}		}				String query = "SELECT t.tradeName, SUM(td.sales) AS sales"				+ ", SUM(td.mids)/"+totalNum+" AS mids, SUM(td.salesNums) AS salesNums"				+ " FROM trade_data td, trade t WHERE td.areaId = " + areaId + " AND td.tradeId = t.id AND td.tradeId in ("				+ tradeIds 				+ ") " 				+ " AND td.dateTime BETWEEN '"+startTime+"' AND '"+endTime+"'"				+ (selectContentArr.length == 1 ? "" : " AND td.industry = '"+selectContentArr[1]+"'")				+ "GROUP BY td.tradeId";		List<Object[]> objects = hibernateUtil.fetchAll(query);		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();		for (Object[] object : objects) {			String name = (String) object[0];			Double sales = Double.parseDouble(object[1].toString());			Double mids = Double.parseDouble(object[2].toString());			Integer salesNums = Integer.parseInt(object[3].toString());			Map<String, Object> map = new HashMap<String, Object>();			map.put("name", name);			map.put("sales", sales);			map.put("mids", mids);			map.put("salesNums", salesNums);			resultList.add(map);		}		return resultList;	}		@SuppressWarnings("unchecked")	public List<String> getAllIndustry(final int areaId) {		String query = "SELECT DISTINCT(td.industry) AS industry FROM trade_data td WHERE 1=1";		if (areaId > 0) {			query += " and td.areaId = " + areaId;		}		List<Object> objects = hibernateUtil.fetchAll(query);		List<String> result = new ArrayList<String>();		for (Object object : objects) {			result.add(object.toString());		}		return result;	}		@SuppressWarnings("unchecked")	public List<Map<String, Object>> getDataByKeys(final String areaId, final String tradeId, final String industry, final String dateStart, final String dateEnd) {		String query = "SELECT td.id, td.areaId, a.areaName, td.tradeId, td.tradeCode, td.tradeName, td.dateTime, "				+ "td.industry, td.sales, td.salesNums, td.mids, td.avgPrice, td.flg, td.createTime, td.mcc  FROM trade_data td, area a WHERE td.areaId = a.id"				+ ("-1".equals(areaId) ? "" : " and td.areaId = " + areaId)				+ ("-1".equals(tradeId) ? "" : " and td.tradeId = " + tradeId)				+ ("-1".equals(industry) ? "" : " and td.industry = '" + industry + "'")				+ ("".equals(dateStart) ? "" : " and td.dateTime >= '" + dateStart + "'")				+ ("".equals(dateEnd) ? "" : " and td.dateTime <= '" + dateEnd + "'")				+ " ORDER BY td.dateTime ASC";		List<Object[]> objects = hibernateUtil.fetchAll(query);		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();		for (Object[] object : objects) {			int id = (Integer) object[0];			int _areaId = (Integer) object[1];			String areaName = (String) object[2];			int _tradeId = (Integer) object[3];//			String tradeCode = (String) object[4];			String tradeName = (String) object[5];			Date dateTime = (Date) object[6];			String _industry = (String) object[7];			double sales = (Double) object[8];			Integer salesNums = (Integer) object[9];			Integer mids = (Integer) object[10];//			double avgPrice = (Double) object[11];			int flg = (Integer) object[12];			Date createTime = (Date) object[13];//			String mcc = (String) object[14];			Map<String, Object> map = new HashMap<String, Object>();			map.put("id", id);			map.put("areaId", _areaId);			map.put("areaName", areaName);			map.put("tradeId", _tradeId);//			map.put("tradeCode", tradeCode);			map.put("tradeName", tradeName);			map.put("dateTime", StringUtil.format(dateTime, "yyyy/MM"));			map.put("industry", _industry);			map.put("sales", sales);			map.put("salesNums", salesNums);			map.put("mids", mids);//			map.put("avgPrice", avgPrice);			map.put("flg", flg);			map.put("createTime", createTime);//			map.put("mcc", mcc);			resultList.add(map);		}		return resultList;	}}