package com.usx.control;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.util.DigestUtils;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import com.usx.model.Area;import com.usx.model.User;import com.usx.service.SysAreaService;import com.usx.service.SysUserService;import com.usx.util.AESUtil;import com.usx.util.StringUtil;@Controller  @RequestMapping("/sys/user")public class SysUserControl {		@Autowired	private SysUserService sysUserService;	@Autowired	private SysAreaService sysAreaService;		@RequestMapping(value = "/list", method = RequestMethod.GET)      public String list(Model model) {		return "sysUser";    }		/**	 * 获得系统用户的数据	 * 	 * @param page	 * @param model	 * @return	 */	@RequestMapping(value = "/getList.do", method = RequestMethod.GET)  	@ResponseBody    public Map<String, Object> getList(String page, Model model) {		Map<String, Object> result = new HashMap<String, Object>();		int _page = Integer.parseInt(page);		List<Map<String, Object>> roleList = sysUserService.getDataList(_page, 10);		result.put("data", roleList);		result.put("currentPage", page);		result.put("pages", sysUserService.getDataCount());		return result;    }		/**	 * 跳转到添加页面	 * @param model	 * @return	 */	@RequestMapping(value = "/addView", method = RequestMethod.GET)      public String addView(Model model) {		List<Area> areaList = sysAreaService.getAllDataList();		model.addAttribute("areaList", areaList);		return "sysUserAdd";    }		/**	 * 保存	 * @return	 */	@RequestMapping(value = "/addSave.do", method = RequestMethod.POST)  	@ResponseBody	public Map<String , Object> addSave(HttpServletRequest req, HttpServletResponse rep) {		Map<String, Object> result = new HashMap<String, Object>();		String id = req.getParameter("id");		String loginName = req.getParameter("loginName");		String password = req.getParameter("password");		String role = req.getParameter("role");		String areaId = req.getParameter("areaId");		String description = req.getParameter("description");		User user = new User();		user.setLoginName(loginName);		user.setPassword(password);		user.setRole(Integer.parseInt(role));		user.setAreaId(Integer.parseInt(areaId));		user.setDescription(description);		// 保存		if (StringUtil.isEmpty(id)) {			sysUserService.saveData(user);		}		// 编辑		else {			user.setId(Integer.parseInt(id));			sysUserService.editData(user);		}		result.put("code", 0);		result.put("msg", "添加成功！");		return result;	}		/**	 * 编辑页面	 * @param dataId	 * @param model	 * @return	 */	@RequestMapping(value = "/editView/{dataId}", method = RequestMethod.GET)      public String editView(@PathVariable int dataId, Model model) {		List<Area> areaList = sysAreaService.getAllDataList();		User user = sysUserService.getDataById(dataId);		model.addAttribute("user", user);		model.addAttribute("areaList", areaList);		return "sysUserAdd";	}		/**	 * 删除	 * @param req	 * @param rep	 * @return	 */	@RequestMapping(value = "/delete.do", method = RequestMethod.POST)  	@ResponseBody	public Map<String , Object> delete(HttpServletRequest req, HttpServletResponse rep) {		Map<String, Object> result = new HashMap<String, Object>();		String id = req.getParameter("id");		if (StringUtil.isEmpty(id) == false) {			// 2、删除			sysUserService.deleteDataById(Integer.parseInt(id));		}		result.put("code", 0);		result.put("msg", "删除成功！");		return result;	}				/**------------------------------登录------------------------------------------*/		@RequestMapping(value = "/loginView", method = RequestMethod.GET)      public String loginView(Model model, HttpServletRequest req, HttpServletResponse rep) {		String serviceName = req.getServerName();		// 闵行地区		if (serviceName.contains("minhang")) {			return "loginMinHang";		}		// 静安区		if (serviceName.contains("jingan")) {			return "loginJingAn";		}		// 宝山区		if (serviceName.contains("baoshan")) {			return "loginBaoshan";		}		return "login";    }		/**	 * 登录	 * @param req	 * @param rep	 * @return	 */	@RequestMapping(value = "/login.do", method = RequestMethod.POST)  	@ResponseBody	public Map<String , Object> login(HttpServletRequest req, HttpServletResponse rep) {		Map<String, Object> result = new HashMap<String, Object>();		String loginName = req.getParameter("loginName");		String password = req.getParameter("password");		if (StringUtil.isEmpty(loginName)) {			result.put("code", 1);			result.put("msg", "请输入登录名！");			return result;		}		if (StringUtil.isEmpty(password)) {			result.put("code", 1);			result.put("msg", "请输入密码！");			return result;		}		User user = sysUserService.getUserByName(loginName);		// 验证用户存在性		if (user == null) {			result.put("code", 1);			result.put("msg", "用户没有注册！");			return result;		}		// 验证密码正确性		//DigestUtils.md5DigestAsHex() 加密  md5Digest  解密		if (DigestUtils.md5DigestAsHex(password.getBytes()).equals(user.getPassword()) == false) {			result.put("code", 1);			result.put("msg", "密码不正确，请重新输入！");			return result;		}		// 保存到缓存中		req.getSession().setAttribute("loginUser", user);		// 获得区域的信息		Area area = sysAreaService.getDataById(user.getAreaId());		req.getSession().setAttribute("loginArea", area);				result.put("code", 0);		result.put("msg", "登录成功！");		return result;	}		@RequestMapping(value = "/loginOut", method = RequestMethod.GET)      public String loginOut(Model model, HttpServletRequest req, HttpServletResponse rep) {		req.getSession().removeAttribute("loginUser");		req.getSession().removeAttribute("loginArea");		String serviceName = req.getServerName();		// 闵行地区		if (serviceName.contains("minhang")) {			return "loginMinHang";		}		// 静安区		if (serviceName.contains("jingan")) {			return "loginJingAn";		}		// 宝山区		if (serviceName.contains("baoshan")) {			return "loginBaoshan";		}		return "login";    }		/**	 * 静安的自动登录	 * @param req	 * @param rep	 * @return	 * @throws Exception 	 */	@RequestMapping(value = "/autoLogin/{loginid}", method = RequestMethod.GET)  	public String autoLogin(HttpServletRequest req, HttpServletResponse rep, @PathVariable String loginid) throws Exception {		String encrytStr;          byte[] encrytByte;          byte[] byteRe = AESUtil.enCrypt("admin,123456", AESUtil.key);          //加密过的二进制数组转化成16进制的字符串          encrytStr = AESUtil.parseByte2HexStr(byteRe);                 System.out.println("add s:"+encrytStr);                    //加密过的16进制的字符串转化成二进制数组          encrytByte = AESUtil.parseHexStr2Byte(loginid);        loginid = AESUtil.deCrypt(encrytByte,AESUtil.key);        String[] loginArr = loginid.split(",");        if (loginArr == null || loginArr.length != 2) {        	return "login";        }        String loginName = loginArr[0];        String password = loginArr[1];		if (StringUtil.isEmpty(loginName)) {			return "login";		}		if (StringUtil.isEmpty(password)) {			return "login";		}		User user = sysUserService.getUserByName(loginName);		// 验证用户存在性		if (user == null) {			return "login";		}		// 验证密码正确性		if (password.equals(user.getPassword()) == false) {			return "login";		}		// 保存到缓存中		req.getSession().setAttribute("loginUser", user);		// 获得区域的信息		Area area = sysAreaService.getDataById(user.getAreaId());		req.getSession().setAttribute("loginArea", area);		return "redirect:/app/show";	}}